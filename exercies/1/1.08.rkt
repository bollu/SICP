#lang racket

(define (avg x y) (/ (+ x y) 2.0))
(define (abs x)(if (> x 0) x (- x)))
(define (square x)(* x x))
(define (delta x y) ( abs (- x y)) )


;whoa, this is bloody EPIC. all I had to change was the approximation function. the rest of it 
;went unchanged, which I find very cool. Also, the reverse polish notation is getting on my nerves

;equation - (number/approx^2 + 2*approx) / 3.0
; make a better approximation with base number and the previous approximation 
(define (betterApproximation number prevApproximation) 
				(/ 
					(+ 
						(/ number 
							(square prevApproximation)
						) 
						
						(* 2 prevApproximation)
					) 
				3.0)) ;this should be 3.0, not 3. if it IS 3, scheme keeps it as a *fraction*. I have no freaking idea why

;if it's 3 and not 3.0 - this is output I get: (this is cube root 27 BTW - a whole number)

;1592506299924220867826892956380025164981754673271879638375364675730317983598762540848829079076669150089407091074160018611461
;7905182749916332798462243374451137574302784746761919646976079110414951958707218306734444539211702835911933197447936542231154
;7220434504767489479085485027578861704732377673189926631016505968242068114319822922880570188429496490216121132078222284213877
;85081558116162069601936649302899074528833537086880953906538499679480273103533389259277414951665600941299055681445665529507112
;461882099717724200124048228873506484083940264372638487399712251512262431198427862508131530589952945185519674322898156294821258
;191458086717249591941416551138687813924461437520065512436771705923504115087583489478256668870923897256544853003513229772549196
;30936277015651026431512208398282770574111575383480784435108114558956741266195831767679302069242853409422193896308502701983541
;407863874798992352780592953738695426549378071585535893132797990914919955264356380413078601608312541690508457640336727360404386
;23730130158962366055390904024482320014745566278148266615231258357377326212232894847666144197624163777765350308565822407059162
;7039985321225197378664558773918240045601029428882354014529
;/
;5308353375694120294511163762953722017787169485300231909240256235542499073985969655738363071978564001375055658399651561437468758
;1335500731313591499502497155261591983333862448564664869690646273783391524515902141291852921069041316033770696818323358798870256
;21501986234253505548224053686750002434799621155851484890915458229796428374377402748312603252765591484133136633085917598479029553
;96280128835417787147065414028027046861224311932842460412824696203230478269910330198025323101834558354312563126608235054419351963
;83181040545842797662775367528835876453571386679395429436852572485610537362328220224079422804007672203901499001320115200138610569
;38366194536839332015188262657462065502953103826146600689375417861256200428339181239053351371945628311477704198133088135069578687
;61732128795166438690133055712783437881751762793045377685993130921791789212012409253016674009740903019845757348309120360376281020
;9530628194242216322504575626295073209055175322927827726655742580735077246182040285137826635143020476641107805953694979328107960
;5396870475257327978696965406290158215431575154115997214060915062023946056528103676866307328392343530542346661773741732459554852
;924639413348533676476294118004843
;note that this fraction evaluates to 3.0 - cube root 27 - *exactly*
;this is one of the more epic things I've seen a program do.


; get the delta between the current approximation and the next approximation
(define (approximationDelta number approximation) (delta approximation (betterApproximation number approximation)) 	)

;approximationIterator
;if approximationDelta < minApproxDelta
;return approximation;
;else approximationIterator (betterApproximation) (approximationDelta)


;if the delta between the current & next one is too small to care about, return the approximation
;otherwise, make a better approximation and check again 
(define (approximationIterator number approximation )
	(if 
		(< (approximationDelta number  approximation) 0.0001) 
		approximation ; then

		(approximationIterator number ;else
			(betterApproximation number approximation)
		);else	
	)) 


(define (cubeRoot x) (approximationIterator x 1) )


(cubeRoot 27)
